{{- $templateName := "k8srequiredresources" }}
{{- $templateConfig := index .Values.constraintTemplates $templateName }}

{{- if $templateConfig.enabled }}
apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: {{ $templateName }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
  annotations:
    metadata.gatekeeper.sh/title: "Required Resources"
    metadata.gatekeeper.sh/version: "1.0.1" # Version from your input
    description: |-
      Requires containers to have defined resource requests and/or limits set (e.g., cpu, memory).
      See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredResources # Static Kind
      validation:
        legacySchema: false
        openAPIV3Schema:
          type: object
          properties:
            exemptImages:
              description: |-
                Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
              type: array
              items:
                type: string
            limits:
              description: "A list of resource limits that must be defined for each non-exempt container (e.g., [\"cpu\", \"memory\"]). Policy is skipped for this check if list is empty or not provided."
              type: array
              items:
                type: string
                enum: ["cpu", "memory"]
            requests:
              description: "A list of resource requests that must be defined for each non-exempt container (e.g., [\"cpu\", \"memory\"]). Policy is skipped for this check if list is empty or not provided."
              type: array
              items:
                type: string
                enum: ["cpu", "memory"]
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredresources

        import data.lib.exempt_container.is_exempt

        # Check for missing required limits
        violation[{"msg": msg, "details": {"container_name": container.name, "missing_limits": missing_keys}}] {
          container := all_input_containers[_]
          not is_exempt(container)
          
          required_limit_types := object.get(input.parameters, "limits", [])
          count(required_limit_types) > 0 # Only proceed if 'limits' parameter is provided and non-empty
          
          resource_definitions_on_container := object.get(container, "resources", {})
          defined_limits_on_container := object.get(resource_definitions_on_container, "limits", {})
          
          provided_limit_keys_on_container := {key | defined_limits_on_container[key]}
          required_limit_keys_set := {type | type := required_limit_types[_]}
          
          missing_keys := required_limit_keys_set - provided_limit_keys_on_container
          count(missing_keys) > 0
          
          msg := sprintf("Container <%v> in pod <%v> is missing required resource limits for: %v", [container.name, input.review.object.metadata.name, missing_keys])
        }

        # Check for missing required requests
        violation[{"msg": msg, "details": {"container_name": container.name, "missing_requests": missing_keys}}] {
          container := all_input_containers[_]
          not is_exempt(container)
          
          required_request_types := object.get(input.parameters, "requests", [])
          count(required_request_types) > 0 # Only proceed if 'requests' parameter is provided and non-empty
          
          resource_definitions_on_container := object.get(container, "resources", {})
          defined_requests_on_container := object.get(resource_definitions_on_container, "requests", {})

          provided_request_keys_on_container := {key | defined_requests_on_container[key]}
          required_request_keys_set := {type | type := required_request_types[_]}

          missing_keys := required_request_keys_set - provided_request_keys_on_container
          count(missing_keys) > 0
          
          msg := sprintf("Container <%v> in pod <%v> is missing required resource requests for: %v", [container.name, input.review.object.metadata.name, missing_keys])
        }

        # Gathers all container types (standard, init, ephemeral)
        all_input_containers[c] {
          c := object.get(input.review.object.spec, "containers", [])[_]
        }
        all_input_containers[c] {
          c := object.get(input.review.object.spec, "initContainers", [])[_]
        }
        all_input_containers[c] {
          c := object.get(input.review.object.spec, "ephemeralContainers", [])[_]
        }
      libs:
        - |
          package lib.exempt_container

          is_exempt(container) {
            exempt_images := object.get(input.parameters, "exemptImages", [])
            img := object.get(container, "image", "") 
            count(exempt_images) > 0
            exemption := exempt_images[_]
            _matches_exemption(img, exemption)
          }

          _matches_exemption(img, exemption) {
            not endswith(exemption, "*")
            exemption == img
          }

          _matches_exemption(img, exemption) {
            endswith(exemption, "*")
            prefix := trim_suffix(exemption, "*")
            startswith(img, prefix)
          }
{{- end }}
