{{- $templateName := "k8sdisallowedtags" }}
{{- $templateConfig := index .Values.constraintTemplates $templateName }}

{{- if $templateConfig.enabled }}
apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: {{ $templateName }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
  annotations:
    metadata.gatekeeper.sh/title: "Disallow tags"
    metadata.gatekeeper.sh/version: "1.0.1"
    description: |-
      Requires container images to have an image tag different from the ones in the specified list.
      Also flags images that do not have a tag specified.
      https://kubernetes.io/docs/concepts/containers/images/#image-names
spec:
  crd:
    spec:
      names:
        kind: K8sDisallowedTags
      validation:
        legacySchema: false
        openAPIV3Schema:
          type: object
          properties:
            exemptImages:
              type: array
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded from enforcement.
                Prefix-matching can be signified with `*`. For example: `my-image-*`. It is recommended that users use
                the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly
                exempting images from an untrusted repository.
              items:
                type: string
            tags:
              type: array
              description: "A list of container image tags that are disallowed (e.g., [\"latest\", \"develop\"]). This rule is skipped if the list is empty or not provided."
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sdisallowedtags

        import data.lib.exempt_container.is_exempt

        # Violation for using a disallowed tag
        violation[{"msg": msg}] {
          container := input_containers[_]
          not is_exempt(container)
          
          disallowed_tags := object.get(input.parameters, "tags", []) # Get disallowed tags, default to empty list
          count(disallowed_tags) > 0 # Only proceed if there are disallowed tags specified

          # Prepare tags for suffix matching (e.g., ":latest")
          tags_to_check_suffix := [suffix | tag_val := disallowed_tags[_]; suffix := concat(":", ["", tag_val])]
          
          strings.any_suffix_match(container.image, tags_to_check_suffix)
          msg := sprintf("Container <%v> image <%v> uses a disallowed tag. Disallowed tags: %v", [container.name, container.image, disallowed_tags])
        }

        # Violation for images that do not specify a tag at all
        violation[{"msg": msg}] {
          container := input_containers[_]
          not is_exempt(container)
          not contains(container.image, ":")
          msg := sprintf("Container <%v> image <%v> must have a tag specified.", [container.name, container.image])
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }
        input_containers[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }
      libs:
        - |
          package lib.exempt_container

          is_exempt(container) {
            exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
            img := container.image
            exemption := exempt_images[_]
            _matches_exemption(img, exemption)
          }

          _matches_exemption(img, exemption) {
            not endswith(exemption, "*")
            exemption == img
          }

          _matches_exemption(img, exemption) {
            endswith(exemption, "*")
            prefix := trim_suffix(exemption, "*")
            startswith(img, prefix)
          }
{{- end }}
