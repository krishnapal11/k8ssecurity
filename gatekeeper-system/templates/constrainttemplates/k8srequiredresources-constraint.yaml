{{- $templateName := "k8srequiredresources" }}
{{- $templateConfig := index .Values.constraintTemplates $templateName }}

{{- if $templateConfig.enabled }}
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredResources {{/* Must match spec.crd.spec.names.kind from the ConstraintTemplate */}}
metadata:
  name: {{ $templateName }}-enforce {{/* Name of this specific constraint instance */}}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  enforcementAction: {{ $templateConfig.enforcementAction | default "dryrun" }} # Default to dryrun
  match:
    {{- /* Default match targets Pods, as this policy inspects container resources. User can override. */}}
    {{- $defaultMatch := dict "kinds" (list (dict "apiGroups" (list "") "kinds" (list "Pod"))) }}
    {{- toYaml ($templateConfig.match | default $defaultMatch) | nindent 4 }}
  parameters:
    {{- /* Pass 'limits', 'requests', and 'exemptImages'.
         The Rego logic handles cases where 'limits' or 'requests' lists might be empty or not provided in params,
         effectively skipping those specific checks. */}}
    {{- if $templateConfig.params }}
    {{- toYaml $templateConfig.params | nindent 4 }}
    {{- else }}
    # For this policy to be effective, provide 'params.limits' and/or 'params.requests' in values.yaml.
    # Example: limits: ["cpu", "memory"], requests: ["cpu", "memory"]
    {}
    {{- end }}
{{- end }}
