{{- $templateName := "k8srequiredannotations" }}
{{- $templateConfig := index .Values.constraintTemplates $templateName }}

{{- /* This constraint is most effective when 'params.annotations' is configured in values.yaml. */}}
{{- if $templateConfig.enabled }}
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredAnnotations {{/* Must match spec.crd.spec.names.kind from the ConstraintTemplate */}}
metadata:
  name: {{ $templateName }}-enforce {{/* Name of this specific constraint instance */}}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  enforcementAction: {{ $templateConfig.enforcementAction | default "dryrun" }} # Default to dryrun
  match:
    {{- /* Default match targets common resources. User should tailor this in values.yaml. */}}
    {{- $defaultMatch := dict "kinds" (list
        (dict "apiGroups" (list "") "kinds" (list "Pod" "Service" "ConfigMap" "Secret" "Namespace"))
        (dict "apiGroups" (list "apps") "kinds" (list "Deployment" "StatefulSet" "DaemonSet"))
        (dict "apiGroups" (list "batch") "kinds" (list "Job" "CronJob"))
        (dict "apiGroups" (list "networking.k8s.io") "kinds" (list "Ingress"))
      )
    }}
    {{- toYaml ($templateConfig.match | default $defaultMatch) | nindent 4 }}
  parameters:
    {{- /* Pass 'annotations' array and optional 'message'.
         The 'annotations' parameter (list of annotation keys/regex) is crucial. */}}
    {{- if $templateConfig.params }}
    {{- toYaml $templateConfig.params | nindent 4 }}
    {{- else }}
    # This constraint requires 'params.annotations' to be configured in values.yaml
    # to define required annotations, e.g., annotations: [{key: "my-key", allowedRegex: "^value-"}]
    # Passing empty {} if params is totally missing in values.yaml for this template.
    # The Rego should handle cases where 'annotations' parameter is missing/empty gracefully.
    {}
    {{- end }}
{{- end }}
