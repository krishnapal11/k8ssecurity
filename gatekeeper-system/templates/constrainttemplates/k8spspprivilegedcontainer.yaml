{{- $templateName := "k8spspprivilegedcontainer" }}
{{- $templateConfig := index .Values.constraintTemplates $templateName }}

{{- if $templateConfig.enabled }}
apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: {{ $templateName }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
  annotations:
    metadata.gatekeeper.sh/title: "Privileged Container"
    metadata.gatekeeper.sh/version: "1.1.2"
    description: >-
      Controls the ability of any container to enable privileged mode.
      Corresponds to the `privileged` field in a PodSecurityPolicy.
      For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged
spec:
  crd:
    spec:
      names:
        kind: K8sPSPPrivilegedContainer
      validation:
        legacySchema: false
        openAPIV3Schema:
          type: object
          description: "Restricts containers with `securityContext.privileged: true`, allowing for image-based exemptions."
          properties:
            exemptImages:
              type: array
              description: >-
                A list of image name patterns to exempt. Images can be specified by their full name or with a wildcard '*' at the end
                (e.g., `my-registry/my-image:*` or `specific-image`).
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      code:
        - engine: K8sNativeValidation
          source:
            validations:
              - expression: variables.isUpdate || size(variables.badContainersFormatted) == 0
                messageExpression: '"The following containers are not allowed to be privileged: " + variables.badContainersFormatted.join(", ")'
            variables:
              - name: allPodContainers # Consolidate all container types
                expression: |
                  (has(object.spec.containers) ? object.spec.containers : []) +
                  (has(object.spec.initContainers) ? object.spec.initContainers : []) +
                  (has(object.spec.ephemeralContainers) ? object.spec.ephemeralContainers : [])
              - name: exemptImagePrefixes # Prefixes from exemptImages ending with '*'
                expression: |
                  !has(variables.params.exemptImages) ? [] :
                    variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).substring(0, string(image).length() - 1))
              - name: exemptImageExact # Exact image names from exemptImages
                expression: |
                  !has(variables.params.exemptImages) ? [] :
                    variables.params.exemptImages.filter(image, !image.endsWith("*"))
              - name: badContainersFormatted # Formatted strings for non-exempt privileged containers
                expression: |
                  variables.allPodContainers.filter(container,
                    has(container.image) && # Ensure container has an image defined
                    !(container.image in variables.exemptImageExact || # Check against exact exemptions
                      variables.exemptImagePrefixes.exists(prefix, string(container.image).startsWith(prefix))) && # Check against prefix exemptions
                    (has(container.securityContext) && has(container.securityContext.privileged) && container.securityContext.privileged == true) # Check if privileged
                  ).map(container, container.name + " (image: " + container.image + ")")
              - name: isUpdate
                expression: has(request.operation) && request.operation == "UPDATE"
        - engine: Rego
          source:
            libs:
              - |
                package lib.exclude_update

                is_update(review) {
                  review.operation == "UPDATE"
                }
              - |
                package lib.exempt_container

                is_exempt(container) {
                  exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                  img := container.image # Assumes container.image exists
                  exemption := exempt_images[_]
                  _matches_exemption(img, exemption)
                }

                _matches_exemption(img, exemption) {
                  not endswith(exemption, "*")
                  exemption == img
                }

                _matches_exemption(img, exemption) {
                  endswith(exemption, "*")
                  prefix := trim_suffix(exemption, "*")
                  startswith(img, prefix)
                }
            rego: |
              package k8spspprivileged # Original package name

              import data.lib.exclude_update.is_update
              import data.lib.exempt_container.is_exempt

              violation[{"msg": msg, "details": {"container_name": c.name}}] {
                not is_update(input.review)
                c := all_containers[_]
                not is_exempt(c)
                object.get(c, "securityContext", {}).privileged == true
                msg := sprintf("Privileged container is not allowed: %v. securityContext.privileged must be false or unset.", [c.name])
              }

              all_containers[c] {
                c := object.get(input.review.object.spec, "containers", [])[_]
              }

              all_containers[c] {
                c := object.get(input.review.object.spec, "initContainers", [])[_]
              }

              all_containers[c] {
                c := object.get(input.review.object.spec, "ephemeralContainers", [])[_]
              }
{{- end }}
